-- Create enum for manual donation type
CREATE TYPE manual_donation_type AS ENUM ('cash', 'in_kind');

-- Create the manual_donations table
CREATE TABLE manual_donations (
    id BIGSERIAL PRIMARY KEY,

    -- donor info
    donor_name TEXT NOT NULL,
    donor_phone TEXT,

    -- donation core details
    donation_type manual_donation_type NOT NULL,
    donation_date DATE NOT NULL DEFAULT CURRENT_DATE,

    -- cash donation fields
    payment_method VARCHAR(50),
    amount NUMERIC(12,2),

    -- in-kind donation fields
    item TEXT,
    quantity INT,

    -- common fields
    notes TEXT,

    -- system timestamps
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Auto-update the updated_at field
CREATE OR REPLACE FUNCTION set_manual_donation_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_set_manual_donation_updated_at
BEFORE UPDATE ON manual_donations
FOR EACH ROW
EXECUTE FUNCTION set_manual_donation_updated_at();




// drop off

CREATE TABLE dropoff_locations (
    id BIGSERIAL PRIMARY KEY,

    organization TEXT NOT NULL,          -- Organization/Company name
    address TEXT NOT NULL,               -- Full address
    scheduled_at TIMESTAMP NOT NULL,     -- Date & Time for drop-off
    phone TEXT NOT NULL,                 -- Contact number
    status VARCHAR(20) NOT NULL DEFAULT 'Active', -- Active / Inactive

    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Auto-update updated_at
CREATE OR REPLACE FUNCTION set_dropoff_location_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_set_dropoff_location_updated_at
BEFORE UPDATE ON dropoff_locations
FOR EACH ROW
EXECUTE FUNCTION set_dropoff_location_updated_at();

